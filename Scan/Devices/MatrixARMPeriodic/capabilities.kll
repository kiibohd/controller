# MatrixARMPeriodic
Name = MatrixARMPeriodicCapabilities;
Version = 0.5;
Author = "HaaTa (Jacob Alexander) 2017-2021";

# Modified Date
Date = 2021-09-28;

# Defines available to the MatrixArmPeriodic sub-module

# This defines the minimum amount of time after a transition until allowing another transition
# Generally switches require a minimum 5 ms debounce period
# Giving an additional 1 ms for misc switches
# Since a decision can usually be made quite quickly, there is little latency on each press
# However, this defines the latency at which the switch state can change
MinDebounceTime => MinDebounceTime_define;
MinDebounceTime = 6; # 6 ms

# This defines the number of clock cycles between periodic scans
# i.e. Between each strobe of the matrix there is a delay to allow for other system processing
# It is highly dependent on the MCU clock speed; however, debounce time is handled in absolute time
# so there is generally little worry about scanning too quickly other than starving other functions.
# If you scan too slowly, keypresses may be slow/delayed, or even dropped.
PeriodicCycles => PeriodicCycles_define;
PeriodicCycles = 2000; # 2000 cycles

# This option delays each strobe by the given number of microseconds
# By default this should *NOT* be set unless your keyboard is having issues
# Delaying more than 10 usecs may cause significant slow-downs with other keyboard functions
StrobeDelay => StrobeDelay_define;
StrobeDelay = 0; # Disabled
#StrobeDelay = 10; # 10 us

# [In]Activity trigger settings
# Will send a trigger once every tick (default 1 second intervals) during inactivity or activity.
# The first tick is immediate with no wait (0th tick).
# After 255 ticks, the ticks stop until the keyboard has activity and goes inactive again (or vice versa).
ActivityTimerMultiplier => ActivityTimerMultiplier_define;
ActivityTimerMultiplier = 1; # 1 second by default
#ActivityTimerMultiplier = 60; # 60 seconds between each tick

# ScanCode Strobe List
# This specified which the column (strobe) GPIOs for the matrix
# gpio(<label>, <index>)
# gpio(A,3)  ==> PA3
# gpio(C,24) ==> PC24
ScanCodeStrobeList => ScanCodeStrobeList_define;
ScanCodeStrobeList = "";

# ScanCode Sense List
# This specified which the row (sense) GPIOs for the matrix
# gpio(<label>, <index>)
# gpio(A,3)  ==> PA3
# gpio(C,24) ==> PC24
ScanCodeSenseList => ScanCodeSenseList_define;
ScanCodeSenseList = "";

# ScanCode Matrix Type
# Specifies which type of pull resistors are used
# GPIO_Config_Pulldown  - Built-in pulldown resistor on sense
# GPIO_Config_Pullup    - Built-in pullup resistor on sense
# GPIO_Config_Opendrain - External pull resistor on sense
ScanCodeMatrixType => ScanCodeMatrixType_define;
ScanCodeMatrixType = "GPIO_Config_Pulldown";

# Invert Sense Value
# When using a pull-up resistor, the sensed values will be inverted
# Press will be 0 instead of 1, and 1 will be off
# Set to 1 to invert, 0 to disable
ScanCodeMatrixInvert => ScanCodeMatrixInvert_define;
ScanCodeMatrixInvert = 0;

# ScanCode Remapping
# This is useful when a matrix is laid out convenient for pcb routing; however,
# is not convenient for matching the pcb switch number to the encoded number.
# Early Input Club keyboards used sequential matrix numbering, though since the K-Type
# this has no longer been the case.
ScanCodeRemapping => ScanCodeRemapping_define;
ScanCodeRemapping = 0; # Disabled by default

# Array for ScanCode Remapping
# Indexing starts from 1
# 0 represents unused scancode
# Example (WhiteFox.sam4s):
# ScanCodeRemappingMatrix = "
#  1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,
# 17,18,19,20,21,22,23,24,25,26,27,28,29, 0,30,31,
# 32,33,34,35,36,37,38,39,40,41,42,43,44, 0,45,46,
# 47,48,49,50,51,52,53,54,55,56,57,58,59, 0,60,61,
# 62,63,64, 0, 0, 0,65, 0, 0,66,67,68,69, 0,70,71,
# ";
ScanCodeRemappingMatrix => ScanCodeRemappingMatrix_define;
ScanCodeRemappingMatrix = ""; # Default to empty array

